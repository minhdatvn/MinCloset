// lib/src/services/local_notification_service.dart

import 'dart:math'; // Th√™m import ƒë·ªÉ s·ª≠ d·ª•ng h√†m ng·∫´u nhi√™n
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:flutter_timezone/flutter_timezone.dart';

class LocalNotificationService {
  final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  // Danh s√°ch c√°c n·ªôi dung th√¥ng b√°o ng·∫´u nhi√™n
  final List<Map<String, String>> _randomMessages = [
    {
      "title": "Your Closet is Calling! ‚ú®",
      "body": "What amazing outfit did you wear today? Let's log it in your journal!"
    },
    {
      "title": "Daily Style Recap üìî",
      "body": "One small step every day. Take a moment to update your fashion journal."
    },
    {
      "title": "Ready for Tomorrow? üëî",
      "body": "A great day starts with a great outfit. Get inspired for tomorrow's look!"
    },
    {
      "title": "MinCloset Misses You! üëã",
      "body": "Don't forget to show your closet some love. What new items have you discovered?"
    }
    // B·∫°n c√≥ th·ªÉ th√™m nhi·ªÅu c·∫∑p title/body kh√°c v√†o ƒë√¢y
  ];


  Future<void> init() async {
    const AndroidInitializationSettings androidInitializationSettings =
        AndroidInitializationSettings('app_icon');

    final DarwinInitializationSettings darwinInitializationSettings =
        DarwinInitializationSettings();

    final InitializationSettings initializationSettings =
        InitializationSettings(
      android: androidInitializationSettings,
      iOS: darwinInitializationSettings,
    );

    await _configureLocalTimezone();

    await _notificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (details) {},
    );
  }

  Future<void> _configureLocalTimezone() async {
    tz.initializeTimeZones();
    final String timeZoneName = await FlutterTimezone.getLocalTimezone();
    tz.setLocalLocation(tz.getLocation(timeZoneName));
  }
  
  Future<void> requestPermissions() async {
    final iOSImplementation = _notificationsPlugin.resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>();
      if (iOSImplementation != null) {
          await iOSImplementation.requestPermissions(
              alert: true,
              badge: true,
              sound: true,
          );
      }

    final androidImplementation = _notificationsPlugin.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
    if (androidImplementation != null) {
        await androidImplementation.requestNotificationsPermission();
    }
  }
  
  /// L√™n l·ªãch cho m·ªôt th√¥ng b√°o h√†ng ng√†y v·ªõi n·ªôi dung v√† th·ªùi gian ng·∫´u nhi√™n.
  Future<void> scheduleDailyReminder() async {
    // 1. Ch·ªçn ng·∫´u nhi√™n m·ªôt tin nh·∫Øn
    final random = Random();
    final message = _randomMessages[random.nextInt(_randomMessages.length)];
    final title = message['title']!;
    final body = message['body']!;

    // 2. Ch·ªçn ng·∫´u nhi√™n th·ªùi gian t·ª´ 19:00 ƒë·∫øn 21:00
    final hour = 19 + random.nextInt(3); // 19, 20, 21
    final minute = random.nextInt(60);   // 0-59

    await _notificationsPlugin.zonedSchedule(
      0, // Lu√¥n d√πng ID = 0 v√¨ ch√∫ng ta ch·ªâ c√≥ 1 th√¥ng b√°o ƒë·ªãnh k·ª≥
      title,
      body,
      _nextInstanceOfTime(hour, minute),
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'daily_reminder_channel', // ID k√™nh m·ªõi
          'Daily Reminder',
          channelDescription: 'A daily reminder to engage with your closet.',
          importance: Importance.defaultImportance, // Gi·∫£m m·ª©c ƒë·ªô quan tr·ªçng ƒë·ªÉ √≠t l√†m phi·ªÅn h∆°n
          priority: Priority.defaultPriority,
        ),
      ),
      // Gi√∫p Android l√™n l·ªãch ch√≠nh x√°c h∆°n sau khi thi·∫øt b·ªã kh·ªüi ƒë·ªông l·∫°i
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle, 
      // Ch·ªâ kh·ªõp v·ªõi th·ªùi gian, th√¥ng b√°o s·∫Ω l·∫∑p l·∫°i m·ªói ng√†y v√†o gi·ªù n√†y
      matchDateTimeComponents: DateTimeComponents.time, 
    );
  }

  // H√†m _nextInstanceOfTime kh√¥ng thay ƒë·ªïi
  tz.TZDateTime _nextInstanceOfTime(int hour, int minute) {
    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduledDate =
        tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);
    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }
    return scheduledDate;
  }

  Future<void> showNow(int id, String title, String body) async {
    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: AndroidNotificationDetails(
        'instant_test_channel', 
        'Instant Test Notifications',
        channelDescription: 'For immediate testing of notifications.',
        importance: Importance.max,
        priority: Priority.high,
      ),
    );
    await _notificationsPlugin.show(id, title, body, platformChannelSpecifics);
  }

  Future<void> cancelNotification(int id) async {
    await _notificationsPlugin.cancel(id);
  }

  Future<void> cancelAllNotifications() async {
    await _notificationsPlugin.cancelAll();
  }
}